def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',

        // Dagger 2
        '**/*Dagger*.*',
        '**/*Dagger*Component*.*',
        '**/*Module.*',
        '**/*Module$*.*',
        '**/*MembersInjector*.*',
        '**/*_Factory*.*',
        '**/*Provide*Factory*.*',
        '**/*$ViewInjector*.*',
        '**/*$*$*.*',

        // Classes I intentionally don't want to test...
        '**/*Activity.*',
        '**/*Binding.*',
        '**/BR.*',
        '**/adapters/**/*.*',
        '**/activities/**/*.*',
        '**/databinding/**/*.*',
        '**/di/**/*.*',
        '**/dto/**/*.*',
        '**/enums/**/*.*',
        '**/factory/**/*.*',
        '**/fragments/**/*.*',
        '**/local/**/*.*',
        '**/models/**/*.*',
        '**/domain/**/*.*',
        '**/paging/**/*.*',
        '**/shared/**/*.*',
        '**/mappers/**/*.*',
        '**/framework/utils/*.*',
        '**/AndroidExtensionsKt.*',
        '**/view/**/*.*',
        '**/views/**/*.*',
        '**/*Activity*.*',
        '**/*DataBinderMapperImpl.*',
        '**/*DefaultImpls*',
        '**/*_Factory*.*',
        '**/*Fragment.*',
        '**/*Application.*',
        '**/*SingleLiveEvent.*',
        '**/*ViewState*.*',
        '**/core/ui/**/*.*',
        '**/core/data/network/**/*.*',
]

task jacocoFullTestReport(type: JacocoReport) {

    group = 'Reporting'
    description = "Generate Jacoco coverage reports for the debug build."

    //Make sure that tests from all modules are run before coverage report
    dependsOn ":app:testDebugUnitTest"
    dependsOn ":core:testDebugUnitTest"
    dependsOn ":events:testDebugUnitTest"

    classDirectories = files([
            fileTree(
                    dir: "$project.rootDir/app/build/intermediates/classes/debug",
                    excludes: fileFilter
            ) + fileTree(
                    dir: "$project.rootDir/app/build/tmp/kotlin-classes/debug",
                    excludes: fileFilter
            ),
            fileTree(
                    dir: "$project.rootDir/core/build/intermediates/classes/debug",
                    excludes: fileFilter
            ) + fileTree(
                    dir: "$project.rootDir/core/build/tmp/kotlin-classes/debug",
                    excludes: fileFilter
            ),
            fileTree(
                    dir: "$project.rootDir/events/build/intermediates/classes/debug",
                    excludes: fileFilter
            ) + fileTree(
                    dir: "$project.rootDir/events/build/tmp/kotlin-classes/debug",
                    excludes: fileFilter
            ),
    ])
    def coverageSourceDirs = [
            "$project.rootDir/app/android.sourceSets.main.java.srcDirs",
            "$project.rootDir/app/src/main/java",
            "$project.rootDir/core/android.sourceSets.main.java.srcDirs",
            "$project.rootDir/core/src/main/java",
            "$project.rootDir/events/android.sourceSets.main.java.srcDirs",
            "$project.rootDir/events/src/main/java",
    ]

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)

    executionData = fileTree(dir: project.rootDir, includes: [
            'app/build/jacoco/testDebugUnitTest.exec',
            // 'app/build/outputs/code-coverage/connected/*coverage.ec',
            'core/build/jacoco/testDebugUnitTest.exec',
            // 'core/build/outputs/code-coverage/connected/*coverage.ec',
            'events/build/jacoco/testDebugUnitTest.exec',
            // 'events/build/outputs/code-coverage/connected/*coverage.ec',
    ])

    reports {
        xml.enabled = true
        html.enabled = true

        html.destination file("$project.rootDir/jacocoHtml")
    }
}